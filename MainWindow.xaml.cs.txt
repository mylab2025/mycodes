using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using MyLab_V2_WPF;


namespace MyLab_V2_WPF
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            ShowDashboard();
            LoadStoredCredentials();
            LoadDashboardData();
        }


        private void SaveCredentialsButton_Click(object sender, RoutedEventArgs e)
        {
            Settings.Default.GitHubUsername = GitHubUsernameTextBox.Text;
            Settings.Default.PersonalAccessToken = PersonalAccessTokenTextBox.Password;
            Settings.Default.Save();

            MessageBox.Show("GitHub credentials saved successfully!", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void LoadStoredCredentials()
        {
            GitHubUsernameTextBox.Text = Settings.Default.GitHubUsername;
            PersonalAccessTokenTextBox.Password = Settings.Default.PersonalAccessToken; // Fix for PasswordBox
        }

        public async Task LoadDashboardData()
        {
            string githubUsername = Settings.Default.GitHubUsername;
            string personalAccessToken = Settings.Default.PersonalAccessToken;
            string apiUrl = $"https://api.github.com/users/{githubUsername}/repos"; // GitHub API to list all repos

            int totalMaterials = 0;
            int lowStockCount = 0;

            try
            {
                using (HttpClient client = new HttpClient())
                {
                    client.DefaultRequestHeaders.Add("User-Agent", "MyLabApp");
                    client.DefaultRequestHeaders.Add("Authorization", $"Bearer {personalAccessToken}");

                    string reposJson = await client.GetStringAsync(apiUrl);
                    JsonDocument reposDoc = JsonDocument.Parse(reposJson);
                    List<string> repoNames = new List<string>();

                    // Extract repository names (which are MIDs)
                    foreach (var repo in reposDoc.RootElement.EnumerateArray())
                    {
                        if (repo.TryGetProperty("name", out JsonElement repoNameElement))
                        {
                            repoNames.Add(repoNameElement.GetString());
                        }
                    }

                    totalMaterials = repoNames.Count; // Total number of materials

                    // Loop through each repo and fetch db.json
                    foreach (string repoName in repoNames)
                    {
                        string jsonUrl = $"https://raw.githubusercontent.com/{githubUsername}/{repoName}/main/db.json";

                        try
                        {
                            string jsonData = await client.GetStringAsync(jsonUrl);
                            JsonDocument doc = JsonDocument.Parse(jsonData);
                            var material = doc.RootElement.GetProperty("inventory")[0];

                            if (material.TryGetProperty("MQNT", out JsonElement quantityElement))
                            {
                                if (quantityElement.GetInt32() < 10)
                                {
                                    lowStockCount++;
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Skipping {repoName}: {ex.Message}"); // Ignore if db.json is missing
                        }
                    }

                    // Update UI
                    Dispatcher.Invoke(() =>
                    {
                        TotalMaterialsTextBlock.Text = totalMaterials.ToString();
                        LowStockTextBlock.Text = lowStockCount.ToString();
                    });
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading data: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }



        private void ShowDashboard()
        {
            MainGrid.Visibility = Visibility.Visible;
            ContentFrame.Visibility = Visibility.Collapsed;
            ContentFrame.Content = null;
        }

        private void btnDashboard_Click(object sender, RoutedEventArgs e)
        {
            ShowDashboard();
        }

        private void btnSearch_Click(object sender, RoutedEventArgs e)
        {
            MainGrid.Visibility = Visibility.Collapsed;
            ContentFrame.Visibility = Visibility.Visible;
            ContentFrame.Navigate(new SearchPage());
        }

        private void btnAddMaterial_Click(object sender, RoutedEventArgs e)
        {
            MainGrid.Visibility = Visibility.Collapsed;
            ContentFrame.Visibility = Visibility.Visible;
            ContentFrame.Navigate(new AddMaterialPage());
        }

        private void btnEditMaterial_Click(object sender, RoutedEventArgs e)
        {
            MainGrid.Visibility = Visibility.Collapsed;
            ContentFrame.Visibility = Visibility.Visible;
            ContentFrame.Navigate(new EditMaterialPage());
        }

        private void btnDeleteMaterial_Click(object sender, RoutedEventArgs e)
        {
            MainGrid.Visibility = Visibility.Collapsed;
            ContentFrame.Visibility = Visibility.Visible;
            ContentFrame.Navigate(new DeleteMaterialPage());
        }


       

    }
}
